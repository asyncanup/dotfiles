# ---- top-level general settings ----

# open color terminal
term screen-256color

# make vim buffer go away from screen after exiting vim
altscreen on

# explicit escape sequence
escape ^Aa

# easier other (alternate window) switching
bindkey ^^ other

# easier copy mode
bindkey ^_ eval 'copy' 'stuff ?'

# making escape key work in vim without a delay
maptimeout 5

# huge scrollback buffer
defscrollback 10000

# scroll window
# termcapinfo xterm* ti@:te@

# no welcome message
startup_message off

# 256 colors
attrcolor b ".I"
termcapinfo xterm 'Co#256:AB=\E[48;5;%dm:AF=\E[38;5;%dm'
defbce on

# mouse tracking allows to switch region focus by clicking
mousetrack on

# give new shells a name
shelltitle 'sh'

# start first shell
screen -t 'sh' bash

# ---- key bindings ----

# create a new editor window
bind e screen nvim

# open a new nnn file window
bind n screen /usr/bin/nnn -c

# reload .screenrc
bind r eval 'source $HOME/.screenrc' 'echo ".screenrc reloaded!"'

# switch to previous and next windows
bindkey ^H prev
bindkey ^L next

# switch to previous and next layouts
bindkey ^[[1;3C eval 'layout prev' 'layout show' # Alt + left
bindkey ^[[1;3D eval 'layout next' 'layout show' # Alt + right

# horizontal panel split
# and get rid of silly xoff freezing
bind s split

# vertical panel split
bind v split -v

# close panel
bind x remove

# quit screen
bind q quit

# navigating regions with Ctrl-arrows
bindkey ^[[1;5D focus left
bindkey ^[[1;5C focus right
bindkey ^[[1;5A focus up
bindkey ^[[1;5B focus down

# F2 puts Screen into resize mode. Resize regions using hjkl keys.
bindkey ^[OQ eval 'command -c rsz' # enter resize mode

# use hjkl keys to resize regions
bind -c rsz h eval 'resize -h -5' 'command -c rsz'
bind -c rsz j eval 'resize -v -5' 'command -c rsz'
bind -c rsz k eval 'resize -v +5' 'command -c rsz'
bind -c rsz l eval 'resize -h +5' 'command -c rsz'

# quickly switch between regions using tab and arrows
bind -c rsz \t    eval 'focus'       'command -c rsz' # Tab
bind -c rsz -k kl eval 'focus left'  'command -c rsz' # Left
bind -c rsz -k kr eval 'focus right' 'command -c rsz' # Right
bind -c rsz -k ku eval 'focus up'    'command -c rsz' # Up
bind -c rsz -k kd eval 'focus down'  'command -c rsz' # Down

# faster copy mode
bind y copy

# copy to clipboard from copy mode
bindkey -m ' ' eval 'stuff \040' 'writebuf' 'exec sh -c "/usr/bin/xsel -b < /tmp/screen-exchange"'

# copy line under cursor from vim and open screen command line
bind t eval 'stuff ^Y^A:'

# ---- layouts ----

layout autosave on
bind l eval 'layout new splitscreen' 'screen -t dotfiles nvim' 'screen -t git' 'split -v' 'focus right' 'layout new fullscreen' 'screen -t code nvim' 'layout select splitscreen'

# ---- status line ----

# current agenda and currently active task
# (recommended to add to .screenrc.local)
# backtick 1 1 1 screen_agenda
# backtick 2 1 1 screen_task

# the following two lines give a two-line status, with the current window highlighted
hardstatus alwayslastline
hardstatus string '%{= kG}%2` %= %{= kw}%-w%{+s} %n*%t%?(%u)%? %{-}%+w %= %{W}%1`  %{g}%{B}%M %d %{W}%c%{g}'

source $HOME/.screenrc.local

# HELP: hardstatus format
# %=     padding
# %?     if
# %F       true if the window has the focus
# %{=}     reset current attribute/color (no specifier next to the "=", means reset)
# %?     end if
# %n     window number
# %t     window title
# %?     if
# %F       true if the window has the focus
# %{+r}    add "reverse" attribute
# %?     end if
# %=     padding

# %{=}   reset current attribute/color (no specifier next to the "=", means reset)
# %-     window numbers and names, before current window
# %{+r}  add "reverse" attribute
# %n     current window number
# %t     current window title
# %{-r}  remove "reverse" attribute
# %-     window numbers and names, after current window
# %=     padding
# %H     hostname

# String Escapes
#
# Screen provides an escape mechanism to insert information like the current
# time into messages or file names. The escape character is % with one
# exception: inside of a window's hardstatus ^% (^E) is used instead.
#
# Here is the full list of supported escapes:
#
# %  the escape character itself
# a  either am or pm
# A  either AM or PM
# c  current time HH:MM in 24h format
# C  current time HH:MM in 12h format
# d  day number
# D  weekday name
# f  flags of the window
# F  sets %? to true if the window has the focus
# h  hardstatus of the window
# H  hostname of the system
# l  current load of the system
# m  month number
# M  month name
# n  window number
# s  seconds
# S  session name
# t  window title
# u  all other users on this window
# w  all window numbers and names. With - qualifier: up to the current window;
#    with + qualifier: starting with the window after the current one.
# W  all window numbers and names except the current one
# y  last two digits of the year number
# Y  full year number
# ?  the part to the next %? is displayed only if a % escape inside the part
#    expands to a non-empty string
# :  else part of %?
# =  pad the string to the display's width (like TeX's hfill).
#    If a number is specified, pad to the percentage of the window's width.
#    A 0 qualifier tells screen to treat the number as absolute position.
#    You can specify to pad relative to the last absolute pad position by
#    adding a + qualifier or to pad relative to the right margin by using -.
#    The padding truncates the string if the specified position lies before
#    the current position. Add the L qualifier to change this.
# <  same as %= but just do truncation, do not fill with spaces
# >  mark the current text position for the next truncation. When screen needs
#    to do truncation, it tries to do it in a way that the marked position gets
#    moved to the specified percentage of the output area. (The area starts
#    from the last absolute pad position and ends with the position specified
#    by the truncation operator.) The L qualifier tells screen to mark the
#    truncated parts with ‘...’.
# {  attribute/color modifier string terminated by the next }
# `  Substitute with the output of a `backtick' command. The length qualifier
#    is misused to identify one of the commands. See Backtick.
#
# The c and C escape may be qualified with a 0 to make screen use zero instead
# of space as fill character. The n and = escapes understand a length qualifier
# (e.g. %3n), D and M can be prefixed with L to generate long names, w and W
# also show the window flags if L is given.
#
# An attribute/color modifier is is used to change the attributes or the color
# settings. Its format is ‘[attribute modifier] [color description]’.
# The attribute modifier must be prefixed by a change type indicator if it can
# be confused with a color description. The following change types are known:
#
# +  add the specified set to the current attributes
# -  remove the set from the current attributes
# !  invert the set in the current attributes
# =  change the current attributes to the specified set
#
# The attribute set can either be specified as a hexadecimal number or a
# combination of the following letters:
#
# d  dim
# u  underline
# b  bold
# r  reverse
# s  standout
# B  blinking
#
# Colors are coded either as a hexadecimal number or two letters specifying
# the desired background and foreground color (in that order). The following
# colors are known:
#
# k  black
# r  red
# g  green
# y  yellow
# b  blue
# m  magenta
# c  cyan
# w  white
# d  default color
# .  leave color unchanged
#
# The capitalized versions of the letter specify bright colors.
# You can also use the pseudo-color ‘i’ to set just the brightness and leave
# the color unchanged.
#
# A one digit/letter color description is treated as foreground or background
# color dependent on the current attributes: if reverse mode is set,
# the background color is changed instead of the foreground color.
# If you don't like this, prefix the color with a ‘.’.
# If you want the same behavior for two-letter color descriptions,
# also prefix them with a ‘.’.
#
# As a special case, ‘%{-}’ restores the attributes and colors that were set
# before the last change was made (i.e. pops one level of the color-change
# stack).
#
# Examples:
#
# ‘G’  set color to bright green
# ‘+b r’  use bold red
# ‘= yd’  clear all attributes, write in default color on yellow background.
# ‘%-Lw%{= BW}%50>%n%f* %t%{-}%+Lw%<’  The available windows centered at the
#      current win dow and truncated to the available width. The current
#      window is displayed white on blue. This can be used with
#     ‘hardstatus alwayslastline’.
# ‘%?%F%{.R.}%?%3n %t%? [%h]%?’  The window number and title and the window's
#      hardstatus, if one is set. Also use a red background if this is the
#      active focus. Useful for ‘caption string’.

# ---- end ----

