##!/bin/bash -i

set -e

now() {
    echo -e "\n$C_CYANî‚° $1 $C_RESET"
}

now "updating system-level dependencies"
sudo apt-get update
sudo apt-get -y upgrade

cd ~

# helper functions
install-by-binary-name() {
    binary_name_and_package_list=( "$@" )
    binary_name=""
    for i in "${!binary_name_and_package_list[@]}"; do
        if (( $i % 2 )); then # odd -> name on apt
            if ! command -v $binary_name >/dev/null 2>&1; then
                package="${binary_name_and_package_list[$i]}"
                now "installing $package"
                sudo apt install -y $package
            fi
        else # even -> binary_name
            binary_name="${binary_name_and_package_list[$i]}"
        fi
    done
}

install-by-same-name() {
    for name in $@; do
        if ! command -v $name >/dev/null 2>&1; then
            now "installing $name"
            sudo apt install -y $name
        fi
    done
}

install-from-url() {
    name_and_url_list=( "$@" )
    name=""
    for i in "${!name_and_url_list[@]}"; do
        if (( $i % 2 )); then # odd -> url
            if ! command -v $name >/dev/null 2>&1; then
                now "installing $name"
                url="${name_and_url_list[$i]}"
                wget "$url"
                sudo apt install -y "./$(basename $url)"
                rm "$(basename $url)"
            fi
        else # even, name
            name="${name_and_url_list[$i]}"
        fi
    done
}

install-from-pip() {
    for lib in $@; do
        if ! command -v $lib >/dev/null 2>&1; then
            now "pip installing $lib"
            pip3 install $lib
        fi
    done
}

install-by-same-name \
    git wget curl lynx screen python3 tldr xclip tree asciinema xsel nnn

install-by-binary-name \
    pip3 python3-pip \
    ctags exuberant-ctags \
    inotifywait inotify-tools

install-from-url \
    bat https://github.com/sharkdp/bat/releases/download/v0.12.1/bat-musl_0.12.1_amd64.deb \
    rg https://github.com/BurntSushi/ripgrep/releases/download/11.0.2/ripgrep_11.0.2_amd64.deb \
    fd https://github.com/sharkdp/fd/releases/download/v7.4.0/fd-musl_7.4.0_amd64.deb \

install-from-pip \
    powerline-shell

if ! command -v pyenv >/dev/null 2>&1; then
    now "installing pyenv"
    sudo apt install -y \
        make build-essential libssl-dev zlib1g-dev libbz2-dev \
        libreadline-dev libsqlite3-dev llvm libncurses5-dev libncursesw5-dev \
        xz-utils tk-dev libffi-dev liblzma-dev python-openssl
    curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
fi

if ! $(pyenv versions | grep neovim4 >/dev/null); then
    now "installing neovim python2 support"
    exit 0
    pyenv install 2.7.17
    pyenv virtualenv 2.7.17 neovim2
    pyenv local neovim2
    pip install pynvim neovim future
    pyenv local system
fi

if ! $(pyenv versions | grep neovim3 >/dev/null); then
    now "installing neovim python3 support"
    pyenv install 3.8.2
    pyenv virtualenv 3.8.2 neovim3
    pyenv local neovim3
    pip install pynvim neovim future
    pyenv local system
fi

if ! command -v nvim >/dev/null 2>&1; then
    now "installing nvim"
    curl -LO https://github.com/neovim/neovim/releases/download/stable/nvim.appimage
    chmod u+x nvim.appimage
    mv ./nvim.appimage ~/bin/nvim

    now "installing nvim plugins"
    mkdir -p .local/share/nvim/session .vim/backup
    nvim '+PlugUpdate' '+PlugClean!' '+PlugUpdate' '+qall'
fi

if ! command -v go >/dev/null 2>&1; then
    now "installing go"
    wget https://dl.google.com/go/go1.13.8.linux-amd64.tar.gz
    sudo tar -xvf go1.13.8.linux-amd64.tar.gz
    rm go1.13.8.linux-amd64.tar.gz
    sudo mv go /usr/local/
fi

if ! [ -s "$NVM_DIR/nvm.sh" ]; then
    now "installing nvm"
    wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash
fi
source "$NVM_DIR/nvm.sh"

if ! command -v node >/dev/null 2>&1; then
    now "installing node"
    nvm install --latest-npm stable
fi

if ! command -v neovim-node-host >/dev/null 2>&1; then
    now "installing neovim node support"
    npm install -g neovim
fi

now "installing global npm scripts"
cd bin && npm install && cd ~

if ! [ -e ~/.todo ] || ! [ -d ~/src ]; then
    now "set up local files and folders"
    touch \
      ~/.todo \
      ~/.screenrc.local \
      ~/.bashrc.local
    mkdir -p \
      ~/src \
      ~/.shell-recordings
fi

now "turn off animations in system ui"
gsettings set org.gnome.desktop.interface enable-animations false

sudo apt -y autoremove

now "done"
